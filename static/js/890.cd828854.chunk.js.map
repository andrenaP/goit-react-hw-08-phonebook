{"version":3,"file":"static/js/890.cd828854.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/form-control/src/form-control.tsx","../node_modules/@chakra-ui/form-control/src/use-form-control.ts","../node_modules/@chakra-ui/input/src/input.tsx","components/ContactAnyInput/ContactAnyInput.jsx","redux/contact/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","redux/contact/contact-selector.js","components/Section/Section.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n    }),\n    [htmlProps],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n","import PropTypes from 'prop-types';\nimport './ContactAnyInput.css';\nimport { Input } from '@chakra-ui/react';\nconst ContactAnyInput = ({\n  type,\n  name,\n  pattern,\n  title,\n  handleChange,\n  LableText,\n}) => {\n  return (\n    <label htmlFor={name} className=\"ContactAnyInputLabel\">\n      {LableText}\n      <Input\n        type={type}\n        name={name}\n        pattern={pattern}\n        title={title}\n        required\n        onChange={handleChange}\n      ></Input>\n    </label>\n  );\n};\n\nexport default ContactAnyInput;\n\nContactAnyInput.propTypes = {\n  type: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  pattern: PropTypes.string,\n  title: PropTypes.string,\n  handleChange: PropTypes.func,\n  LableText: PropTypes.string,\n};\n","export const selectContactsList = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectContactsFilter = state => state.filters;\n","import { useState } from 'react';\nimport './ContactForm.css';\nimport ContactAnyInput from '../ContactAnyInput';\nimport { Notify } from 'notiflix';\nimport { Button } from '@chakra-ui/react';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContactsList } from 'redux/contact/selectors';\nimport { addContact } from 'redux/contact/operations';\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContactsList);\n\n  const [name, setname] = useState('');\n  const [number, setnumber] = useState('');\n\n  const handleChange = (event, SetFunction) => {\n    SetFunction(event.target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    onSubmit({ name: name, number: number.toString() });\n    reset();\n    event.target.reset();\n  };\n\n  const onSubmit = contactData => {\n    const { name } = contactData;\n\n    if (contacts) {\n      const filterFind = contacts.find(\n        element => element.name.toLowerCase() === name.toLowerCase()\n      );\n\n      if (filterFind) {\n        window.alert(`Name: ${name} is already in contacts`);\n        return 0;\n      }\n    }\n\n    dispatch(addContact(contactData))\n      .unwrap()\n      .then(originalPromiseResult => {\n        Notify.success(\n          `${originalPromiseResult.name} successfully added to contacts`\n        );\n      })\n      .catch(() => {\n        Notify.failure(\"Sorry, something's wrong\");\n      });\n  };\n\n  const reset = () => {\n    setname('');\n    setnumber('');\n  };\n\n  return (\n    <form action=\"\" className=\"MainForm\" onSubmit={handleSubmit}>\n      <ContactAnyInput\n        LableText=\"name\"\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+((['-][a-zA-Zа-яА-Я])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        handleChange={event => handleChange(event, setname)}\n      />\n      <ContactAnyInput\n        LableText=\"number\"\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        handleChange={event => handleChange(event, setnumber)}\n      />\n\n      <Button type=\"submit\">Add contact</Button>\n    </form>\n  );\n}\n","import { Notify } from 'notiflix';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contact/operations';\n\nconst ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = userId => {\n    dispatch(deleteContact(userId))\n      .unwrap()\n      .then(originalPromiseResult => {\n        Notify.success(\n          `${originalPromiseResult.name} successfully deleted from contacts`\n        );\n      })\n      .catch(() => {\n        Notify.failure(\"Sorry, something's wrong\");\n      });\n  };\n\n  return (\n    <li key={id}>\n      <span className=\"name\">{name}</span>\n      <span className=\"number\">{number}</span>\n      <button\n        onClick={() => {\n          handleDeleteContact(id);\n        }}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nexport default ContactItem;\n","import PropTypes from 'prop-types';\nimport './ContactList.css';\nimport { useSelector } from 'react-redux';\nimport ContactItem from 'components/ContactItem/ContactItem';\n\nimport { getVisibleContacts } from 'redux/contact/contact-selector';\n\nimport { selectContactsList } from 'redux/contact/selectors';\n\nimport { getfilterValue } from 'redux/contact/filterSlice';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectContactsList);\n  const filter = useSelector(getfilterValue);\n  const visibleContacts = getVisibleContacts({ filter, contacts });\n\n  return (\n    <>\n      <ul className=\"ListOfNames\">\n        {visibleContacts && (\n          <>\n            {visibleContacts.length === 0 && 'Nothing found'}\n            {visibleContacts.map(contacts => {\n              return <ContactItem key={contacts.id} {...contacts} />;\n            })}\n          </>\n        )}\n      </ul>\n    </>\n  );\n};\n\nexport default ContactList;\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object),\n  deleteFunc: PropTypes.func,\n};\n","export const getVisibleContacts = ({ contacts, filter }) => {\n  const normalizedFilter = filter.toLowerCase();\n  if (contacts) {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n};\n","import PropTypes from 'prop-types';\nimport './Section.css';\n\nconst Section = ({ title, children }) => {\n  return (\n    <section>\n      <h1 className=\"title\">{title}</h1>\n      {children}\n    </section>\n  );\n};\n\nexport default Section;\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n","import './Filter.css';\nimport ContactAnyInput from '../ContactAnyInput';\nimport { filtering } from 'redux/contact/filterSlice';\nimport { useDispatch } from 'react-redux';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const handleChangeFilter = event => {\n    dispatch(filtering(event.target.value));\n  };\n  return (\n    <ContactAnyInput\n      LableText=\"Find contacts by name\"\n      type=\"text\"\n      name=\"filter\"\n      handleChange={handleChangeFilter}\n    />\n  );\n};\n\nexport default Filter;\n","import ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Section from 'components/Section';\nimport Filter from 'components/Filter';\n\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchContacts } from 'redux/contact/operations';\nimport { selectError, selectIsLoading } from 'redux/contact/selectors';\n\nexport const Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <div>\n      <Section title=\"Phonebook\">\n        <ContactForm />\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter />\n        {isLoading && !error && <b>Request in progress</b>}\n        <ContactList />\n      </Section>\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["createContext","errorMessage","FormControlStylesProvider","useFormControlStyles","strict","FormControlProvider","useFormControlContext","useFormControlProvider","ownProps","forwardRef","idProp","getLabelProps","context","useMultiStyleConfig","id","isRequired","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","labelId","useId","feedbackId","helpTextId","hasFeedbackText","useState","setHasFeedbackText","hasHelpText","setHasHelpText","isFocused","setFocus","getHelpTextProps","forwardedRef","useCallback","ref","node","mergeRefs","htmlFor","getErrorMessageProps","dataAttr","getRootProps","role","getRequiredIndicatorProps","children","onFocus","onBlur","FormControl","styles","props","omitThemingProps","div","__css","cx","name","displayName","chakra","field","helperText","useFormControlProps","ariaAttr","labelIds","readOnly","required","rest","push","disabled","join","_a","_b","_c","useFormControl","callAllHandlers","htmlSize","input","className","size","Input","type","pattern","title","handleChange","LableText","onChange","selectContactsList","state","contacts","items","selectIsLoading","isLoading","selectError","error","ContactForm","dispatch","useDispatch","useSelector","setname","number","setnumber","event","SetFunction","target","value","onSubmit","contactData","find","element","toLowerCase","window","alert","addContact","unwrap","then","originalPromiseResult","Notify","catch","reset","action","preventDefault","toString","ContactAnyInput","onClick","userId","deleteContact","visibleContacts","normalizedFilter","filter","contact","includes","getVisibleContacts","getfilterValue","length","map","filtering","Contacts","useEffect","fetchContacts"],"sourceRoot":""}